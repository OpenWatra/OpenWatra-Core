//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace WaTra.Api.Server
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IWatraMasterDataApiController
    {
        /// <summary>Returns a list of hose connectors.</summary>
        /// <returns>A JSON array of hose connectors</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HoseConnector>> HoseConnectorAsync();

        /// <param name="body">Hose Connector to add.</param>
        /// <returns>Response containing the created Hose Connector.</returns>
        System.Threading.Tasks.Task<HoseConnector> AddHoseConnectorAsync(HoseConnector body);

        /// <param name="body">Hose connector to validate.</param>
        /// <returns>Response contains validation errors, if any occured.</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ValidationError>> ValidateHoseConnectorAsync(HoseConnector body);

        /// <param name="id">ID of Hose Connector to fetch</param>
        /// <returns>Hose Connector with the ID.</returns>
        System.Threading.Tasks.Task<HoseConnector> GetHoseConnectorByIdAsync(int id);

        /// <param name="body">Hose Connector to update.</param>
        /// <returns>Response containing the updated Hose Connector.</returns>
        System.Threading.Tasks.Task<HoseConnector> UpdateHoseConnectorAsync(HoseConnector body);

        /// <param name="id">ID of hose connector to delete</param>
        /// <returns>Hose connector deleted</returns>
        System.Threading.Tasks.Task DeleteHoseConnectorAsync(int id);

        /// <summary>Returns a list of hoses.</summary>
        /// <returns>A JSON array of hoses</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Hose>> HoseAsync();

        /// <param name="body">Hose to add.</param>
        /// <returns>Response containing the created Hose.</returns>
        System.Threading.Tasks.Task<Hose> AddHoseAsync(Hose body);

        /// <param name="body">Hose to validate.</param>
        /// <returns>Response contains validation errors, if any occured.</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ValidationError>> ValidateHoseAsync(Hose body);

        /// <param name="id">ID of Hose to fetch</param>
        /// <returns>Hose with the ID.</returns>
        System.Threading.Tasks.Task<Hose> GetHoseByIdAsync(int id);

        /// <param name="body">Hose to update.</param>
        /// <returns>Response containing the updated Hose.</returns>
        System.Threading.Tasks.Task<Hose> UpdateHoseAsync(Hose body);

        /// <param name="id">ID of hose to delete</param>
        /// <returns>Hose deleted</returns>
        System.Threading.Tasks.Task DeleteHoseAsync(int id);

        /// <summary>Returns a list of pumps.</summary>
        /// <returns>A JSON array of pumps</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Pump>> PumpAsync();

        /// <param name="body">Pump to add.</param>
        /// <returns>Response containing the created Pump.</returns>
        System.Threading.Tasks.Task<Pump> AddPumpAsync(Pump body);

        /// <param name="body">Pump to validate.</param>
        /// <returns>Response contains validation errors, if any occured.</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ValidationError>> ValidatePumpAsync(Pump body);

        /// <param name="id">ID of Pump to fetch</param>
        /// <returns>Pump with the ID.</returns>
        System.Threading.Tasks.Task<Pump> GetPumpByIdAsync(int id);

        /// <param name="body">Pump to update.</param>
        /// <returns>Response containing the updated Pump.</returns>
        System.Threading.Tasks.Task<Pump> UpdatePumpAsync(Pump body);

        /// <param name="id">ID of Pump to delete</param>
        /// <returns>Pump deleted</returns>
        System.Threading.Tasks.Task DeletePumpAsync(int id);

        /// <summary>Returns a list of all WatraRoutes.</summary>
        /// <returns>A JSON array of WatraRoutes</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WatraRoute>> WatraRouteAsync();

        /// <param name="body">WatraRoute to add.</param>
        /// <returns>Response contains te created WatraRoute</returns>
        System.Threading.Tasks.Task<WatraRoute> AddWatraRouteAsync(WatraRoute body);

        /// <param name="body">WatraRoute to validate.</param>
        /// <returns>Response contains validation errors, if any occured.</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ValidationError>> ValidateWatraRouteAsync(WatraRoute body);

        /// <param name="id">ID of WatraRoute to fetch</param>
        /// <returns>WatraRoute with the ID.</returns>
        System.Threading.Tasks.Task<WatraRoute> GetWatraRouteByIdAsync(int id);

        /// <param name="body">Watra to update.</param>
        /// <returns>Response containing the updated Watra.</returns>
        System.Threading.Tasks.Task<WatraRoute> UpdateWatraAsync(WatraRoute body);

        /// <param name="id">ID of WatraRoute to delete</param>
        /// <returns>WatraRoute deleted</returns>
        System.Threading.Tasks.Task DeleteWatraRouteAsync(int id);

        /// <param name="id">ID of WatraRoute to fetch</param>
        /// <returns>Calculation of the given WatraRoute and PumpSelection.</returns>
        System.Threading.Tasks.Task<WatraCalculation> GetWatraRouteCalculationAsync(int id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class WatraMasterDataApiController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IWatraMasterDataApiController _implementation;

        public WatraMasterDataApiController(IWatraMasterDataApiController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>Returns a list of hose connectors.</summary>
        /// <returns>A JSON array of hose connectors</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("HoseConnector", Name = "HoseConnector")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HoseConnector>> HoseConnector()
        {
            return _implementation.HoseConnectorAsync();
        }

        /// <param name="body">Hose Connector to add.</param>
        /// <returns>Response containing the created Hose Connector.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("HoseConnector", Name = "addHoseConnector")]
        public System.Threading.Tasks.Task<HoseConnector> AddHoseConnector([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] HoseConnector body)
        {
            return _implementation.AddHoseConnectorAsync(body);
        }

        /// <param name="body">Hose connector to validate.</param>
        /// <returns>Response contains validation errors, if any occured.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Validate/HoseConnector", Name = "validateHoseConnector")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ValidationError>> ValidateHoseConnector([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] HoseConnector body)
        {
            return _implementation.ValidateHoseConnectorAsync(body);
        }

        /// <param name="id">ID of Hose Connector to fetch</param>
        /// <returns>Hose Connector with the ID.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("HoseConnector/{id}", Name = "GetHoseConnectorById")]
        public System.Threading.Tasks.Task<HoseConnector> GetHoseConnectorById([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id)
        {
            return _implementation.GetHoseConnectorByIdAsync(id);
        }

        /// <param name="body">Hose Connector to update.</param>
        /// <returns>Response containing the updated Hose Connector.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("HoseConnector/{id}", Name = "updateHoseConnector")]
        public System.Threading.Tasks.Task<HoseConnector> UpdateHoseConnector([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] HoseConnector body)
        {
            return _implementation.UpdateHoseConnectorAsync(body);
        }

        /// <param name="id">ID of hose connector to delete</param>
        /// <returns>Hose connector deleted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("HoseConnector/{id}", Name = "DeleteHoseConnector")]
        public System.Threading.Tasks.Task DeleteHoseConnector([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id)
        {
            return _implementation.DeleteHoseConnectorAsync(id);
        }

        /// <summary>Returns a list of hoses.</summary>
        /// <returns>A JSON array of hoses</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Hose", Name = "Hose")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Hose>> Hose()
        {
            return _implementation.HoseAsync();
        }

        /// <param name="body">Hose to add.</param>
        /// <returns>Response containing the created Hose.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Hose", Name = "addHose")]
        public System.Threading.Tasks.Task<Hose> AddHose([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Hose body)
        {
            return _implementation.AddHoseAsync(body);
        }

        /// <param name="body">Hose to validate.</param>
        /// <returns>Response contains validation errors, if any occured.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Validate/Hose", Name = "validateHose")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ValidationError>> ValidateHose([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Hose body)
        {
            return _implementation.ValidateHoseAsync(body);
        }

        /// <param name="id">ID of Hose to fetch</param>
        /// <returns>Hose with the ID.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Hose/{id}", Name = "GetHoseById")]
        public System.Threading.Tasks.Task<Hose> GetHoseById([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id)
        {
            return _implementation.GetHoseByIdAsync(id);
        }

        /// <param name="body">Hose to update.</param>
        /// <returns>Response containing the updated Hose.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Hose/{id}", Name = "updateHose")]
        public System.Threading.Tasks.Task<Hose> UpdateHose([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Hose body)
        {
            return _implementation.UpdateHoseAsync(body);
        }

        /// <param name="id">ID of hose to delete</param>
        /// <returns>Hose deleted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("Hose/{id}", Name = "DeleteHose")]
        public System.Threading.Tasks.Task DeleteHose([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id)
        {
            return _implementation.DeleteHoseAsync(id);
        }

        /// <summary>Returns a list of pumps.</summary>
        /// <returns>A JSON array of pumps</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Pump", Name = "Pump")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Pump>> Pump()
        {
            return _implementation.PumpAsync();
        }

        /// <param name="body">Pump to add.</param>
        /// <returns>Response containing the created Pump.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Pump", Name = "addPump")]
        public System.Threading.Tasks.Task<Pump> AddPump([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Pump body)
        {
            return _implementation.AddPumpAsync(body);
        }

        /// <param name="body">Pump to validate.</param>
        /// <returns>Response contains validation errors, if any occured.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Validate/Pump", Name = "validatePump")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ValidationError>> ValidatePump([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Pump body)
        {
            return _implementation.ValidatePumpAsync(body);
        }

        /// <param name="id">ID of Pump to fetch</param>
        /// <returns>Pump with the ID.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Pump/{id}", Name = "GetPumpById")]
        public System.Threading.Tasks.Task<Pump> GetPumpById([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id)
        {
            return _implementation.GetPumpByIdAsync(id);
        }

        /// <param name="body">Pump to update.</param>
        /// <returns>Response containing the updated Pump.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Pump/{id}", Name = "updatePump")]
        public System.Threading.Tasks.Task<Pump> UpdatePump([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Pump body)
        {
            return _implementation.UpdatePumpAsync(body);
        }

        /// <param name="id">ID of Pump to delete</param>
        /// <returns>Pump deleted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("Pump/{id}", Name = "DeletePump")]
        public System.Threading.Tasks.Task DeletePump([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id)
        {
            return _implementation.DeletePumpAsync(id);
        }

        /// <summary>Returns a list of all WatraRoutes.</summary>
        /// <returns>A JSON array of WatraRoutes</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("WatraRoute", Name = "WatraRoute")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WatraRoute>> WatraRoute()
        {
            return _implementation.WatraRouteAsync();
        }

        /// <param name="body">WatraRoute to add.</param>
        /// <returns>Response contains te created WatraRoute</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("WatraRoute", Name = "addWatraRoute")]
        public System.Threading.Tasks.Task<WatraRoute> AddWatraRoute([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] WatraRoute body)
        {
            return _implementation.AddWatraRouteAsync(body);
        }

        /// <param name="body">WatraRoute to validate.</param>
        /// <returns>Response contains validation errors, if any occured.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Validate/WatraRoute", Name = "validateWatraRoute")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ValidationError>> ValidateWatraRoute([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] WatraRoute body)
        {
            return _implementation.ValidateWatraRouteAsync(body);
        }

        /// <param name="id">ID of WatraRoute to fetch</param>
        /// <returns>WatraRoute with the ID.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("WatraRoute/{id}", Name = "GetWatraRouteById")]
        public System.Threading.Tasks.Task<WatraRoute> GetWatraRouteById([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id)
        {
            return _implementation.GetWatraRouteByIdAsync(id);
        }

        /// <param name="body">Watra to update.</param>
        /// <returns>Response containing the updated Watra.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("WatraRoute/{id}", Name = "updateWatra")]
        public System.Threading.Tasks.Task<WatraRoute> UpdateWatra([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] WatraRoute body)
        {
            return _implementation.UpdateWatraAsync(body);
        }

        /// <param name="id">ID of WatraRoute to delete</param>
        /// <returns>WatraRoute deleted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("WatraRoute/{id}", Name = "DeleteWatraRoute")]
        public System.Threading.Tasks.Task DeleteWatraRoute([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id)
        {
            return _implementation.DeleteWatraRouteAsync(id);
        }

        /// <param name="id">ID of WatraRoute to fetch</param>
        /// <returns>Calculation of the given WatraRoute and PumpSelection.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("WatraCalculation/{id}", Name = "GetWatraRouteCalculation")]
        public System.Threading.Tasks.Task<WatraCalculation> GetWatraRouteCalculation([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int id)
        {
            return _implementation.GetWatraRouteCalculationAsync(id);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Error
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        public int Code { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HoseConnector
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Display name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>Diameter of the connector.</summary>
        [Newtonsoft.Json.JsonProperty("Diameter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double Diameter { get; set; }

        /// <summary>The unique ID can be used to determine whether two hose connectors can be connected.</summary>
        [Newtonsoft.Json.JsonProperty("UniqueId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UniqueId { get; set; } = "00000000-0000-0000-0000-000000000000";

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Hose
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Display name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>Describes how long a single hose element is.</summary>
        [Newtonsoft.Json.JsonProperty("ElementLengthInMetres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double ElementLengthInMetres { get; set; }

        [Newtonsoft.Json.JsonProperty("HoseConnector", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public HoseConnector HoseConnector { get; set; } = new HoseConnector();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Pump
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Display name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("HoseConnector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HoseConnector HoseConnector { get; set; }

        [Newtonsoft.Json.JsonProperty("Hose", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hose Hose { get; set; }

        /// <summary>How many hoses are carried with the pump.</summary>
        [Newtonsoft.Json.JsonProperty("NumberOfHoses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int NumberOfHoses { get; set; }

        /// <summary>Amount of litres which the pump can move at its maximum capacity.</summary>
        [Newtonsoft.Json.JsonProperty("MaxFlowRateLitresPerMinute", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double MaxFlowRateLitresPerMinute { get; set; }

        /// <summary>Max outlet pressure of the pump in bar.</summary>
        [Newtonsoft.Json.JsonProperty("MaxOutletPressureBar", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double MaxOutletPressureBar { get; set; }

        /// <summary>Polynomial of type y=a[0]+a[1]*x+a[2]*x^2 + ..., where x is the flow rate (l/min) and y is the maximum pump pressure (bar)</summary>
        [Newtonsoft.Json.JsonProperty("PumpPressureFlowModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PumpPressureFlowModelCoefficient> PumpPressureFlowModel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PumpPressureFlowModelCoefficient
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Polynomal coefficient.</summary>
        [Newtonsoft.Json.JsonProperty("Coefficient", Required = Newtonsoft.Json.Required.Always)]
        public double Coefficient { get; set; }

        [Newtonsoft.Json.JsonProperty("Exponent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Exponent { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WatraRoute
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Display name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>Description of the route.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>This WatraRoute is released and active, i.e. can be viewed by others and material is booked from inventory.</summary>
        [Newtonsoft.Json.JsonProperty("IsActiveWatra", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActiveWatra { get; set; }

        /// <summary>Flow rate in water transport, Unit l/min</summary>
        [Newtonsoft.Json.JsonProperty("FlowRate", Required = Newtonsoft.Json.Required.Always)]
        public double FlowRate { get; set; }

        /// <summary>Minimal pressure at the end of hose line, Unit bar</summary>
        [Newtonsoft.Json.JsonProperty("MinimalOutletPressure", Required = Newtonsoft.Json.Required.Always)]
        public double MinimalOutletPressure { get; set; }

        /// <summary>Safety pressure that is used as safety factor during calculation (at least 2 bar recommended), Unit bar</summary>
        [Newtonsoft.Json.JsonProperty("SafetyPressure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SafetyPressure { get; set; }

        /// <summary>Joined distances and height differences of Watra between all way points, Unit m</summary>
        [Newtonsoft.Json.JsonProperty("WatraRouteDistanceHeightElements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<WatraRouteDistanceHeightElement> WatraRouteDistanceHeightElements { get; set; }

        /// <summary>Desired selection and order of pump placement along route.</summary>
        [Newtonsoft.Json.JsonProperty("PumpSelections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<PumpSelection> PumpSelections { get; set; } = new System.Collections.Generic.List<PumpSelection>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WatraRouteDistanceHeightElement
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Sort order of the element</summary>
        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SortOrder { get; set; }

        /// <summary>Length of this part of the WatraRoute, Unit m</summary>
        [Newtonsoft.Json.JsonProperty("Length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Length { get; set; }

        /// <summary>Height difference between start and end point of this part of the WatraRoute, Unit m</summary>
        [Newtonsoft.Json.JsonProperty("HeightDifference", Required = Newtonsoft.Json.Required.Always)]
        public double HeightDifference { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PumpSelection
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Sort order of the element</summary>
        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SortOrder { get; set; }

        /// <summary>Desired number of parallel hose lines between pumps, Unit l, 1..2</summary>
        [Newtonsoft.Json.JsonProperty("NumberOfHoseLines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 2)]
        public int NumberOfHoseLines { get; set; }

        [Newtonsoft.Json.JsonProperty("Pump", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Pump Pump { get; set; } = new Pump();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WatraCalculation
    {
        /// <summary>Display name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Description of the route.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>Safety pressure used to calculate this Watra, Unit bar</summary>
        [Newtonsoft.Json.JsonProperty("SafetyPressure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SafetyPressure { get; set; }

        /// <summary>Flowrate used in this Watra section, Unit l/min</summary>
        [Newtonsoft.Json.JsonProperty("ActualFlowRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ActualFlowRate { get; set; }

        /// <summary>Remaining distance to the end of the Watra, Unit m</summary>
        [Newtonsoft.Json.JsonProperty("RemainingDistance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RemainingDistance { get; set; }

        /// <summary>The Watra is divided in sections, each section has its own pump.</summary>
        [Newtonsoft.Json.JsonProperty("WatraCalculationSection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<WatraCalculationSection> WatraCalculationSection { get; set; }

        /// <summary>Messages concerning the calculation of the Watra.</summary>
        [Newtonsoft.Json.JsonProperty("WatraCalculationMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<WatraCalculationMessage> WatraCalculationMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WatraCalculationSection
    {
        /// <summary>Length of this section of the Watra, Unit m</summary>
        [Newtonsoft.Json.JsonProperty("SectionLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SectionLength { get; set; }

        /// <summary>Height difference between start and end point of this section of the Watra, Unit m</summary>
        [Newtonsoft.Json.JsonProperty("HeightDifference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double HeightDifference { get; set; }

        /// <summary>Heighest point above start point of this section, Unit m</summary>
        [Newtonsoft.Json.JsonProperty("HeightPeak", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double HeightPeak { get; set; }

        /// <summary>Set pressure of pump, i.e. start pressure of this section, Unit bar</summary>
        [Newtonsoft.Json.JsonProperty("PressureAtSectionStart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double PressureAtSectionStart { get; set; }

        /// <summary>Pressure loss in this section due to height, Unit bar</summary>
        [Newtonsoft.Json.JsonProperty("PressureLossHeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double PressureLossHeight { get; set; }

        /// <summary>Pressure loss in this section due to hydrodynamic friction in all hose lines, Unit bar</summary>
        [Newtonsoft.Json.JsonProperty("PressureLossFriction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double PressureLossFriction { get; set; }

        /// <summary>Pressure at end of hose line of this section, Unit bar</summary>
        [Newtonsoft.Json.JsonProperty("PressureAtSectionEnd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double PressureAtSectionEnd { get; set; }

        /// <summary>Pump used in this Watra section.</summary>
        [Newtonsoft.Json.JsonProperty("NameOfPump", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameOfPump { get; set; }

        /// <summary>Name of used connector.</summary>
        [Newtonsoft.Json.JsonProperty("NameOfConnector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameOfConnector { get; set; }

        /// <summary>Diameter of used connector, Unit mm</summary>
        [Newtonsoft.Json.JsonProperty("DiameterConnector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DiameterConnector { get; set; }

        /// <summary>Number of hose lines in this section.</summary>
        [Newtonsoft.Json.JsonProperty("NumberOfHoseLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfHoseLines { get; set; }

        /// <summary>Total number of hoses used.</summary>
        [Newtonsoft.Json.JsonProperty("TotalHosesUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalHosesUsed { get; set; }

        /// <summary>Number of hoses used that are not stored on the pump.</summary>
        [Newtonsoft.Json.JsonProperty("ExternalHosesNeeded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ExternalHosesNeeded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WatraCalculationMessage
    {
        /// <summary>Message.</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>Severity, either error, warning or info</summary>
        [Newtonsoft.Json.JsonProperty("Severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Severity { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ValidationError
    {
        /// <summary>Message describing the error</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>Property concerned by the validation error</summary>
        [Newtonsoft.Json.JsonProperty("Property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
